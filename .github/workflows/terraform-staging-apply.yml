name: Terraform Apply

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  
jobs:
  apply:
    runs-on: ubuntu-latest

    env:
      SERVICE_NAME: tts-service
      ENVIRONMENT: staging
      TF_VAR_environment: staging
      TF_VAR_bucket_name_prefix: tts-service
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "us-east-1"
      AWS_REGION: "us-east-1"

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.10.0

    - name: Initialize Terraform
      working-directory: terraform/staging
      run: terraform init

    - name: Plan Terraform
      working-directory: terraform/staging
      run: terraform plan

    - name: Apply Terraform
      working-directory: terraform/staging
      run: terraform apply -auto-approve
    
    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: true 
    - name: Set outputs
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    
    - name: Build, tag, and push Docker image
      id: build-and-tag-docker-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ECR_REPOSITORY: ${{ env.SERVICE_NAME }}-${{ ENV.ENVIRONMENT}}-repository
      run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend/app
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE_URI=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

    - name: Download task definition
      env:
        AWS_ECS_TASK_DEFINITION_NAME: ${{ env.SERVICE_NAME }}-${{ ENV.ENVIRONMENT}}-task
      run: |
        aws ecs describe-task-definition \
        --task-definition ${{ env.AWS_ECS_TASK_DEFINITION_NAME}} \
        --query taskDefinition \
        --output json > taskDefinition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: update-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1.1.3
      env:
        AWS_ECS_CONTAINER_NAME: ${{ env.SERVICE_NAME }}-${{ ENV.ENVIRONMENT}}-container
        IMAGE_URI: ${{ steps.build-and-tag-docker-image.outputs.IMAGE_URI }}
      with:
        task-definition: taskDefinition.json
        container-name: ${{ env.AWS_ECS_CONTAINER_NAME }}
        image: ${{ steps.build-and-tag-docker-image.outputs.IMAGE_URI }}

    - name: Deploy Amazon ECS task definition
      id: deploy-ecs
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.11
      env:
        AWS_ECS_SERVICE_NAME: ${{ env.SERVICE_NAME }}-${{ ENV.ENVIRONMENT}}-service
        AWS_ECS_CLUSTER_NAME : ${{ env.SERVICE_NAME }}-${{ ENV.ENVIRONMENT}}-cluster
      with:
        task-definition: ${{ steps.update-task-def.outputs.task-definition }}
        service: ${{env.AWS_ECS_SERVICE_NAME}}
        cluster: ${{env.AWS_ECS_CLUSTER_NAME}}
        wait-for-service-stability: true
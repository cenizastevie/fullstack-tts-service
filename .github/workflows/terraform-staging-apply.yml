name: Terraform Apply

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  apply:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "us-east-1"
      TF_VAR_mysqlpassword: ${{ secrets.MYSQL_PASSWORD }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Initialize Terraform
      working-directory: terraform/staging
      run: terraform init

    - name: Plan Terraform
      working-directory: terraform/staging
      run: terraform plan

    - name: Apply Terraform
      working-directory: terraform/staging
      run: terraform apply -auto-approve

    - name: Capture ECR Repository URL
      id: ecr_output  # This is the step ID, which we will reference later
      working-directory: terraform/staging
      run: |
        # Capture the ECR repository URL from terraform output
        ecr_repository_url=$(terraform output -raw ecr_repository_url 2>/dev/null)
        
        # Debugging output
        echo "Captured ECR repository URL: $ecr_repository_url"
        
        # Check if the URL is empty or invalid
        if [ -z "$ecr_repository_url" ]; then
          echo "Error: ECR repository URL is empty or invalid."
          exit 1
        fi
    
        # Output the repository URL to GitHub Actions output file (new method)
        echo "ECR_REPOSITORY_URL=$ecr_repository_url" >> $GITHUB_OUTPUT
        
        # Extract the registry and repository parts from the full URL
        ECR_REGISTRY=$(echo $ecr_repository_url | cut -d'/' -f1)
        ECR_REPOSITORY=$(echo $ecr_repository_url | cut -d'/' -f2-)
        
        # Set the extracted values as GitHub output
        echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_OUTPUT
        echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_OUTPUT
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.ecr_output.outputs.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ steps.ecr_output.outputs.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Echo values for debugging purposes
        echo "Building Docker image with the following:"
        echo "ECR_REGISTRY: $ECR_REGISTRY"
        echo "ECR_REPOSITORY: $ECR_REPOSITORY"
        echo "IMAGE_TAG: $IMAGE_TAG"
        
        # Build and push Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f backend/app/Dockerfile backend/app
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: Deploy to ECS
      run: |
        # Update ECS service with the new image
        ecs_cluster="${{ steps.ecr_output.outputs.ECR_REGISTRY }}-${{ steps.ecr_output.outputs.ECR_REPOSITORY }}-cluster"
        ecs_service="${{ steps.ecr_output.outputs.ECR_REGISTRY }}-${{ steps.ecr_output.outputs.ECR_REPOSITORY }}-service"
        
        aws ecs update-service --cluster $ecs_cluster --service $ecs_service --force-new-deployment
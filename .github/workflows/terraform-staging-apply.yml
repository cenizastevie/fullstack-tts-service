name: Terraform Apply

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  apply:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "us-east-1"
      TF_VAR_mysqlpassword: ${{ secrets.MYSQL_PASSWORD }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Initialize Terraform
      working-directory: terraform/staging
      run: terraform init

    - name: Plan Terraform
      working-directory: terraform/staging
      run: terraform plan

    - name: Apply Terraform
      working-directory: terraform/staging
      run: terraform apply -auto-approve

    - name: Capture ECR Repository URL
      id: ecr_output
      working-directory: terraform/staging
      run: |
        ecr_repository_url=$(terraform output -raw ecr_repository_url 2>/dev/null)
        if [ -z "$ecr_repository_url" ]; then
          echo "Error: ECR repository URL is empty or invalid."
          exit 1
        fi
        echo "ECR_REPOSITORY_URL=$ecr_repository_url" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_URL }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f backend/app/Dockerfile backend/app
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to ECS
      run: |
        ecs_cluster="${var.bucket_name_prefix}-${var.environment}-cluster"
        ecs_service="${var.bucket_name_prefix}-${var.environment}-service"
        aws ecs update-service --cluster $ecs_cluster --service $ecs_service --force-new-deployment
